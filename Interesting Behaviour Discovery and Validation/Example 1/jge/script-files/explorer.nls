;********************************************************
; FILENAME: explorer.nls
; DATE    : 27/05/2021, 10:51PM
; AUTHOR  : Syed Kaleem Aslam
;
; DESCRIPTION:
; -------------------------------------------------------
; Reporters and functions which collect data
; from sensors and send commands to robots. 
; Together, these functions can generate code
; to find interesting behaviour without any 
; observer input.
;********************************************************


;########################################################
;                    CODE STARTS
;########################################################


TO ROBOT::FORWARD
  if(draw-trail)[ pen-down ]
  if steps < maximum-step-count [ ;and (found-goal-state? = false) [ ; and garbage-collected < garbage-amount [
    if [pcolor] of patch-ahead 1 != 15
    [
    fd 0.5
    ]
    set steps steps + 1
    
    count-visits
  ]
END

TO ROBOT::LEFT [angle]
  if steps < maximum-step-count [;and (found-goal-state? = false) [ ; and garbage-collected < garbage-amount [
    left angle
    set steps steps + 1
    set turn-counter turn-counter + 1
    
    count-visits
  ]
END

TO ROBOT::RIGHT [angle]
  if steps < maximum-step-count [;and (found-goal-state? = false) [ ; and garbage-collected < garbage-amount [
    right angle
    set steps steps + 1
    set turn-counter turn-counter + 1
    
    count-visits
  ]
END

TO ROBOT::TURN-AROUND
  if steps < maximum-step-count [ ; and garbage-collected < garbage-amount [
    set heading heading - 180
    set steps steps + 1
    set turn-counter turn-counter + 1
    
    fd 2
    count-visits
  ]
END

TO-REPORT ROBOT::OBSTACLE-AHEAD?
  
  ;let amount (count patches in-cone 3 35 with [is-wall? = true]);

  
  let flag ([is-wall?] of patch-ahead 3) = true;
  if(flag)[
    set obstacle-infront-counter obstacle-infront-counter + 1
  ]


  report flag
END


to-report ROBOT::COLOUR-AHEAD-WHITE? 
; The ant performs the sensing step of checking if the white
; colour is directly ahead.

  report ([pcolor] of patch-ahead 1) = 9.9
end

to-report ROBOT::COLOUR-AHEAD-YELLOW? 
; The ant performs the sensing step of checking if the yellow
; colour is directly ahead.

  report ([pcolor] of patch-ahead 1) = 45
end

to-report ROBOT::COLOUR-AHEAD-BLUE? 
; The ant performs the sensing step of checking if the blue
; colour is directly ahead.

  report ([pcolor] of patch-ahead 1) = 95
end

to-report ROBOT::COLOUR-AHEAD-GREEN? 
; The ant performs the sensing step of checking if the green
; colour is directly ahead.

  report ([pcolor] of patch-ahead 1) = 55
end

to-report ROBOT::COLOUR-AHEAD-RED? 
; The ant performs the sensing step of checking if the red
; colour is directly ahead.

  report ([pcolor] of patch-ahead 1) = 15
end


to-report calculate-codelength1

  let Pcounts [Pcounter] of patches

  let calc 0.0
  let total 0
  let adjusted-count 0
  let prob 0.0
  let neglogprob 0.0
  let probfactor 500000
  
 
  foreach Pcounts
  [ my-count ->
    set total total + my-count * probfactor + 1]

  foreach Pcounts
  [ my-count ->
    set adjusted-count my-count * probfactor + 1
    set prob (adjusted-count / total)
    set neglogprob (- log prob 2)
    set calc calc + adjusted-count * neglogprob
  ]
  if  calc > 1.040559637855928206E09
  [
;      export-view (word calc ".png")
;      export-interface (word calc ".png")
;      export-output "Parameters"
    ]
  report calc  
  

end


